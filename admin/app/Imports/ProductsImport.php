<?php

namespace App\Imports;

use App\Models\Product;
use App\Models\Category;
use Illuminate\Support\Collection;
use Illuminate\Support\Facades\Validator;
use Maatwebsite\Excel\Concerns\ToCollection;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Maatwebsite\Excel\Concerns\WithChunkReading;
use Maatwebsite\Excel\Concerns\SkipsOnError;
use Maatwebsite\Excel\Concerns\SkipsOnFailure;
use Maatwebsite\Excel\Concerns\WithValidation;
use Maatwebsite\Excel\Concerns\Importable;
use Throwable;

class ProductsImport implements 
    ToCollection, 
    WithHeadingRow, 
    WithChunkReading,
    SkipsOnError,
    SkipsOnFailure
{
    use Importable;

    public array $errors = [];
    public int $successCount = 0;
    public int $failedCount = 0;
    private array $importedBarcodes = []; // Track barcodes imported in this session
    private array $existingBarcodes = []; // Cache existing barcodes from DB
    private array $categoryCache = []; // Cache categories
    private bool $initialized = false;

    /**
     * Process imported collection
     */
    public function collection(Collection $rows)
    {
        // Load all existing barcodes once at the start (optimization!)
        if (!$this->initialized) {
            $this->existingBarcodes = Product::whereNotNull('barcode')
                ->pluck('barcode')
                ->toArray();
            $this->initialized = true;
        }

        foreach ($rows as $index => $row) {
            try {
                // Get row number (add 2: 1 for header, 1 for 0-based index)
                $rowNumber = $index + 2;

                // Normalize column names to support multiple formats
                $normalizedRow = $this->normalizeRow($row);

                // Convert types for proper validation
                $normalizedRow = $this->convertTypes($normalizedRow);

                // Set default for empty stock
                if (empty($normalizedRow['stok'])) {
                    $normalizedRow['stok'] = 0;
                }

                // Validate row data
                $validator = Validator::make($normalizedRow, [
                    'nama_produk' => 'required|string|max:255',
                    'kategori' => 'required|string',
                    'harga_modal' => 'required|numeric|min:0',
                    'harga_jual' => 'required|numeric|min:0',
                    'stok' => 'required|numeric|min:0',
                    'min_stok' => 'nullable|numeric|min:1',
                    'barcode' => 'nullable|string|max:191',
                    'aktif' => 'nullable|in:ya,tidak,yes,no,1,0',
                    'kiloan' => 'nullable|in:ya,tidak,yes,no,1,0',
                ]);

                if ($validator->fails()) {
                    $this->errors[] = "Baris {$rowNumber}: " . implode(', ', $validator->errors()->all());
                    $this->failedCount++;
                    continue;
                }

                // Find or create category (with caching)
                $categoryName = trim($normalizedRow['kategori']);
                if (!isset($this->categoryCache[$categoryName])) {
                    $this->categoryCache[$categoryName] = Category::firstOrCreate(
                        ['name' => $categoryName]
                    );
                }
                $category = $this->categoryCache[$categoryName];

                // Parse boolean values
                $isActive = $this->parseBoolean($normalizedRow['aktif'] ?? 'ya');
                $isPluEnabled = $this->parseBoolean($normalizedRow['kiloan'] ?? 'tidak');

                // Check for duplicate barcode BEFORE insert (optimized with cache!)
                $barcode = $normalizedRow['barcode'] ?? null;
                
                // Skip if barcode already exists in DB (check cache, not query!)
                if ($barcode && in_array($barcode, $this->existingBarcodes)) {
                    $this->errors[] = "Baris {$rowNumber}: Barcode {$barcode} sudah ada di database (skip)";
                    $this->failedCount++;
                    continue;
                }
                
                // Skip if barcode already imported in this session
                if ($barcode && in_array($barcode, $this->importedBarcodes)) {
                    $this->errors[] = "Baris {$rowNumber}: Barcode {$barcode} duplicate dalam CSV (skip)";
                    $this->failedCount++;
                    continue;
                }

                // Create product
                // NOTE: SKU is NOT set here - will be auto-generated by Product model
                Product::create([
                    'name' => trim($normalizedRow['nama_produk']),
                    'category_id' => $category->id,
                    'cost_price' => (int) $normalizedRow['harga_modal'],
                    'price' => (int) $normalizedRow['harga_jual'],
                    'stock' => (int) $normalizedRow['stok'],
                    'min_stock' => isset($normalizedRow['min_stok']) && $normalizedRow['min_stok'] ? (int) $normalizedRow['min_stok'] : 10,
                    'barcode' => $barcode,
                    'is_active' => $isActive,
                    'is_plu_enabled' => $isPluEnabled,
                    // 'sku' => NOT SET - auto-generated by Product::creating() event
                ]);

                // Track this barcode as imported (both in session and cache)
                if ($barcode) {
                    $this->importedBarcodes[] = $barcode;
                    $this->existingBarcodes[] = $barcode; // Add to cache too!
                }

                $this->successCount++;

            } catch (\Exception $e) {
                $rowNumber = $index + 2;
                $this->errors[] = "Baris {$rowNumber}: " . $e->getMessage();
                $this->failedCount++;
            }
        }
    }

    /**
     * Normalize row data to standard column names
     * Supports multiple column name formats
     */
    private function normalizeRow($row): array
    {
        $normalized = [];

        // Map: standard_name => [possible_aliases]
        // NOTE: 'sku' column will be IGNORED - auto-generated by Product model
        $columnMapping = [
            'nama_produk' => ['nama_produk', 'nama_barang', 'name', 'product_name', 'namabarang', 'produk'],
            'kategori' => ['kategori', 'kategori_produk', 'category', 'kategoriproduk', 'product_category'],
            'harga_modal' => ['harga_modal', 'hargamodal', 'modal', 'cost_price', 'cost'],
            'harga_jual' => ['harga_jual', 'hargajual', 'harga', 'price', 'selling_price'],
            'stok' => ['stok', 'stok_produk', 'stokproduk', 'stock', 'qty', 'quantity'],
            'min_stok' => ['min_stok', 'minstok', 'minimal_stok', 'minimum_stock', 'min_stock'],
            'barcode' => ['barcode', 'kode_barcode', 'kodebarcode'],
            'aktif' => ['aktif', 'active', 'is_active', 'status', 'isactive'],
            'kiloan' => ['kiloan', 'plu', 'is_plu', 'timbangan', 'isplu'],
        ];

        // Normalize each column
        foreach ($columnMapping as $standardName => $aliases) {
            $found = false;
            foreach ($aliases as $alias) {
                // Case-insensitive search
                foreach ($row as $key => $value) {
                    if (strtolower(trim($key)) === strtolower(trim($alias))) {
                        $normalized[$standardName] = $value;
                        $found = true;
                        break 2;
                    }
                }
            }
            
            // Set default if not found (only for optional fields)
            if (!$found) {
                $normalized[$standardName] = null;
            }
        }

        return $normalized;
    }

    /**
     * Convert data types for proper validation
     */
    private function convertTypes(array $data): array
    {
        return [
            'nama_produk' => $data['nama_produk'] ? (string) $data['nama_produk'] : null,
            'kategori' => $data['kategori'] ? (string) $data['kategori'] : null,
            'harga_modal' => $data['harga_modal'],
            'harga_jual' => $data['harga_jual'],
            'stok' => $data['stok'],
            'min_stok' => $data['min_stok'],
            'barcode' => $data['barcode'] ? (string) $data['barcode'] : null,
            'aktif' => $data['aktif'] ? (string) $data['aktif'] : null,
            'kiloan' => $data['kiloan'] ? (string) $data['kiloan'] : null,
        ];
    }

    /**
     * Parse boolean values from various formats
     */
    private function parseBoolean($value): bool
    {
        if (is_bool($value)) {
            return $value;
        }

        $value = strtolower(trim($value ?? ''));
        
        return in_array($value, ['ya', 'yes', '1', 'true'], true);
    }

    /**
     * Chunk size for processing
     */
    public function chunkSize(): int
    {
        return 100;
    }

    /**
     * Handle errors during import
     */
    public function onError(Throwable $error)
    {
        $this->errors[] = "Error: " . $error->getMessage();
        $this->failedCount++;
    }

    /**
     * Handle validation failures
     */
    public function onFailure(\Maatwebsite\Excel\Validators\Failure ...$failures)
    {
        foreach ($failures as $failure) {
            $this->errors[] = "Baris {$failure->row()}: " . implode(', ', $failure->errors());
            $this->failedCount++;
        }
    }

    /**
     * Get import summary
     */
    public function getSummary(): array
    {
        return [
            'success' => $this->successCount,
            'failed' => $this->failedCount,
            'errors' => $this->errors,
        ];
    }
}
